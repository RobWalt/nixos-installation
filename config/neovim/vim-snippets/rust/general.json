{
  "anyhow-anyhow": {
    "prefix": "anyh",
    "body": [
      "anyhow::anyhow!(\"$1\")"
    ],
    "description": "anyhow"
  },
  "anyhow-bail": {
    "prefix": "bail",
    "body": [
      "anyhow::bail!(\"$1\")"
    ],
    "description": "bail"
  },
  "anyhow-result": {
    "prefix": "anyres",
    "body": [
      "anyhow::Result<$1>"
    ],
    "description": "bail"
  },
  "serde-json-serialize": {
    "prefix": "jsonify",
    "body": [
      "serde_json::to_string(&$1)"
    ],
    "description": "json serialize"
  },
  "serde-json-deserialize": {
    "prefix": "dejsonify",
    "body": [
      "serde_json::from_str(&$1)"
    ],
    "description": "json deserialize"
  },
  "async-fn": {
    "prefix": "afn",
    "body": [
      "${1:pub} ${2:async} fn ${3:fn_name}(${4:_args: ()}) -> ${5:()}  {",
      "  ${6:unimplemented!()}",
      "}"
    ],
    "description": "general async function"
  },
  "pub-fn": {
    "prefix": "pfn",
    "body": [
      "${1:pub} fn ${2:fn_name}(${3:_args: ()}) -> ${4:()}  {",
      "  ${5:unimplemented!()}",
      "}"
    ],
    "description": "general normal function"
  },
  "newtype": {
    "prefix": "nt",
    "body": [
      "${1:pub} struct ${2:typename}(${3:newtype_of});"
    ],
    "description": "newtype type"
  },
  "collect-vec": {
    "prefix": ".cv",
    "body": [
      ".collect::<Vec<_>>()"
    ],
    "description": "collect to vector",
    "luasnip": {
      "autotrigger": true
    }
  },
  "test-module": {
    "prefix": "testmod",
    "body": [
      "#[cfg(test)]",
      "mod ${1:mod name} {",
      "  #[test]",
      "  fn ${2:test_name}() {",
      "    ${3:todo!()}",
      "  }",
      "}"
    ],
    "description": "setup of test module"
  }
}
